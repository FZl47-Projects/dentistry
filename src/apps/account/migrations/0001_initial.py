# Generated by Django 5.1.4 on 2024-12-26 06:37

import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(blank=True, default='no name', max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='IR', unique=True, verbose_name='phonenumber')),
                ('is_phonenumber_confirmed', models.BooleanField(default=False, verbose_name='phonenumber is confirmed')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='CommonUser',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('_role', models.CharField(default='common_user', max_length=12, verbose_name='role')),
                ('city', models.CharField(max_length=50, verbose_name='city')),
            ],
            options={
                'abstract': False,
            },
            bases=('account.baseuser',),
        ),
        migrations.CreateModel(
            name='DoctorUser',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('_role', models.CharField(default='doctor_user', max_length=12, verbose_name='role')),
                ('city', models.CharField(max_length=50, verbose_name='city')),
                ('expertise', models.CharField(max_length=100, verbose_name='expertise')),
            ],
            options={
                'abstract': False,
            },
            bases=('account.baseuser',),
        ),
        migrations.CreateModel(
            name='SuperUser',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('_role', models.CharField(default='super_user', max_length=10, verbose_name='role')),
                ('is_superuser', models.BooleanField(default=True, editable=False, verbose_name='is superuser')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            bases=('account.baseuser', models.Model),
        ),
    ]
